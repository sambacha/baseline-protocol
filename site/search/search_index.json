{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s]+"},"docs":[{"location":"","text":"Welcome to MkDocs \uf0c1 For full documentation visit mkdocs.org . Commands \uf0c1 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout \uf0c1 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"DOCS/","text":"Registrar \uf0c1 Contract that acts as a client for interacting with the ERC1820Registry onlyManager() \uf0c1 Throws if called by any account other than the owner. constructor(address ERC1820RegistryAddress) (public) \uf0c1 Constructor that takes an argument of the ERC1820RegistryAddress Upon actual deployment of a static registry contract, this argument can be removed setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal) \uf0c1 Since this is an internal method any contract inheriting this contract would be leveraged as the sender for the interface registry This enables setting the interface implementation interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external) \uf0c1 This enables getting the address of the implementer assignManagement(address _newManager) (internal) \uf0c1 Since this is an internal method any contract inheriting this contract would be leveraged to call this function directly This enables assigning or changing manager getManager() \u2192 address (public) \uf0c1 This allows you to get this contract manager address OrgRegistry \uf0c1 Contract for maintaining organization registry Contract inherits from Ownable and ERC165Compatible Ownable contains ownership criteria of the organization registry ERC165Compatible contains interface compatibility checks constructor(address _erc1820) (public) \uf0c1 constructor function that takes the address of a pre-deployed ERC1820 registry. Ideally, this contract is a publicly known address: 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor sets the interfaces and registers the current contract with the global registry setInterfaces() \u2192 bool (public) \uf0c1 This is an implementation of setting interfaces for the organization registry contract the character \u2018^\u2019 corresponds to bit wise xor of individual interface id\u2019s which are the parsed 4 bytes of the function signature of each of the functions in the org registry contract getInterfaces() \u2192 bytes4 (external) \uf0c1 This function is a helper function to be able to get the set interface id by the setInterfaces() canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external) \uf0c1 Indicates whether the contract implements the interface \u2018interfaceHash\u2019 for the address \u2018addr\u2019 or not. Below implementation is necessary to be able to have the ability to register with ERC1820 assignManager(address _newManager) (external) \uf0c1 Since this is an inherited method from Registrar, it allows for a new manager to be set for this contract instance registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) \uf0c1 Function to register an organization Function to register an organization updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) \uf0c1 Function to update an organization Function to update an organization registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external) \uf0c1 Function to register the names of the interfaces associated with the OrgRegistry Function to register an organization\u2019s interfaces for easy lookup getOrgCount() \u2192 uint256 (external) \uf0c1 Function to get the count of number of organizations to help with extraction getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) \uf0c1 Function to get a single organization\u2019s details getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external) \uf0c1 Function to get organization\u2019s interface details RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \uf0c1 UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \uf0c1 IOrgRegistry \uf0c1 registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) \uf0c1 updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) \uf0c1 getOrgCount() \u2192 uint256 (external) \uf0c1 getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) \uf0c1 ERC165Compatible \uf0c1 setInterfaces() \u2192 bool (public) \uf0c1 ERC1820Registry \uf0c1 This contract is the official implementation of the ERC1820 Registry. For more details, see https://eips.ethereum.org/EIPS/eip-1820 getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external) \uf0c1 Query if an address implements an interface and through which contract. setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external) \uf0c1 Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.) setManager(address _addr, address _newManager) (external) \uf0c1 Sets \u2018_newManager\u2019 as manager for \u2018_addr\u2019. The new manager will be able to call \u2018setInterfaceImplementer\u2019 for \u2018_addr\u2019. getManager(address _addr) \u2192 address (public) \uf0c1 Get the manager of an address. interfaceHash(string _interfaceName) \u2192 bytes32 (external) \uf0c1 Compute the keccak256 hash of an interface given its name. updateERC165Cache(address _contract, bytes4 _interfaceId) (external) \uf0c1 Updates the cache with whether the contract implements an ERC165 interface or not. implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public) \uf0c1 implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public) \uf0c1 Checks whether a contract implements an ERC165 interface or not without using nor updating the cache. isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal) \uf0c1 Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not. noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal) \uf0c1 Make a call on a contract without throwing if the function does not exist. InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer) \uf0c1 Indicates a contract is the \u2018implementer\u2019 of \u2018interfaceHash\u2019 for \u2018addr\u2019. ManagerChanged(address addr, address newManager) \uf0c1 Indicates \u2018newManager\u2019 is the address of the new manager for \u2018addr\u2019. S\u016brya\u2019s Description Report \uf0c1 Files Description Table \uf0c1 File Name SHA-1 Hash contracts/registry/IOrgRegistry.sol 0514e15aa16c4c92f61c3cdc3f17d93e3ee56377 contracts/registry/OrgRegistry.sol e0bb2ddd83c0d3373d6b58d50ec756a833ac88d0 contracts/registry/Registrar.sol 6507a72d2283a5e2cc04bc99ea90ef1f878fe9b7 Contracts Description Table \uf0c1 Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IOrgRegistry Interface \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f OrgRegistry Implementation Ownable, ERC165Compatible, Registrar, IOrgRegistry \u2514 Public \u2757\ufe0f \ud83d\uded1 ERC165Compatible Registrar \u2514 setInterfaces Public \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getInterfaces External \u2757\ufe0f NO\u2757\ufe0f \u2514 canImplementInterfaceForAddress External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManager External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 registerInterfaces External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f \u2514 getInterfaceAddresses External \u2757\ufe0f NO\u2757\ufe0f Registrar Implementation \u2514 Public \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 setInterfaceImplementation Internal \ud83d\udd12 \ud83d\uded1 \u2514 interfaceAddr External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManagement Internal \ud83d\udd12 \ud83d\uded1 \u2514 getManager Public \u2757\ufe0f NO\u2757\ufe0f Legend \uf0c1 Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable S\u016brya\u2019s Description Report \uf0c1 Files Description Table \uf0c1 File Name SHA-1 Hash contracts/privacy/IShield.sol c4b6e694bbdd4317e6fdc1e595e467cb10e5e1dd contracts/privacy/IVerifier.sol ba4926ea2f01fde5d11362808fc1e573e69e31e3 contracts/privacy/Shield.sol 14415a0a47a10c0865993bdc3c8a350c683dc69f Contracts Description Table \uf0c1 Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IShield Interface \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f IVerifier Interface \u2514 verify External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f Shield Implementation IShield, MerkleTreeSHA256 \u2514 Public \u2757\ufe0f \ud83d\uded1 MerkleTreeSHA256 \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f Legend \uf0c1 Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable","title":"Overview"},{"location":"DOCS/#registrar","text":"Contract that acts as a client for interacting with the ERC1820Registry","title":"Registrar"},{"location":"DOCS/#onlymanager","text":"Throws if called by any account other than the owner.","title":"onlyManager()"},{"location":"DOCS/#constructoraddress-erc1820registryaddress-public","text":"Constructor that takes an argument of the ERC1820RegistryAddress Upon actual deployment of a static registry contract, this argument can be removed","title":"constructor(address ERC1820RegistryAddress) (public)"},{"location":"DOCS/#setinterfaceimplementationstring-_interfacelabel-address-_implementation-internal","text":"Since this is an internal method any contract inheriting this contract would be leveraged as the sender for the interface registry This enables setting the interface implementation","title":"setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal)"},{"location":"DOCS/#interfaceaddraddress-addr-string-_interfacelabel-address-external","text":"This enables getting the address of the implementer","title":"interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external)"},{"location":"DOCS/#assignmanagementaddress-_newmanager-internal","text":"Since this is an internal method any contract inheriting this contract would be leveraged to call this function directly This enables assigning or changing manager","title":"assignManagement(address _newManager) (internal)"},{"location":"DOCS/#getmanager-address-public","text":"This allows you to get this contract manager address","title":"getManager() \u2192 address (public)"},{"location":"DOCS/#orgregistry","text":"Contract for maintaining organization registry Contract inherits from Ownable and ERC165Compatible Ownable contains ownership criteria of the organization registry ERC165Compatible contains interface compatibility checks","title":"OrgRegistry"},{"location":"DOCS/#constructoraddress-_erc1820-public","text":"constructor function that takes the address of a pre-deployed ERC1820 registry. Ideally, this contract is a publicly known address: 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor sets the interfaces and registers the current contract with the global registry","title":"constructor(address _erc1820) (public)"},{"location":"DOCS/#setinterfaces-bool-public","text":"This is an implementation of setting interfaces for the organization registry contract the character \u2018^\u2019 corresponds to bit wise xor of individual interface id\u2019s which are the parsed 4 bytes of the function signature of each of the functions in the org registry contract","title":"setInterfaces() \u2192 bool (public)"},{"location":"DOCS/#getinterfaces-bytes4-external","text":"This function is a helper function to be able to get the set interface id by the setInterfaces()","title":"getInterfaces() \u2192 bytes4 (external)"},{"location":"DOCS/#canimplementinterfaceforaddressbytes32-interfacehash-address-addr-bytes32-external","text":"Indicates whether the contract implements the interface \u2018interfaceHash\u2019 for the address \u2018addr\u2019 or not. Below implementation is necessary to be able to have the ability to register with ERC1820","title":"canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external)"},{"location":"DOCS/#assignmanageraddress-_newmanager-external","text":"Since this is an inherited method from Registrar, it allows for a new manager to be set for this contract instance","title":"assignManager(address _newManager) (external)"},{"location":"DOCS/#registerorgaddress-_address-bytes32-_name-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata-bool-external","text":"Function to register an organization Function to register an organization","title":"registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external)"},{"location":"DOCS/#updateorgaddress-_address-bytes32-_name-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata-bool-external","text":"Function to update an organization Function to update an organization","title":"updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external)"},{"location":"DOCS/#registerinterfacesbytes32-_groupname-address-_tokenaddress-address-_shieldaddress-address-_verifieraddress-bool-external","text":"Function to register the names of the interfaces associated with the OrgRegistry Function to register an organization\u2019s interfaces for easy lookup","title":"registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external)"},{"location":"DOCS/#getorgcount-uint256-external","text":"Function to get the count of number of organizations to help with extraction","title":"getOrgCount() \u2192 uint256 (external)"},{"location":"DOCS/#getorgaddress-_address-address-bytes32-bytes-bytes-bytes-bytes-external","text":"Function to get a single organization\u2019s details","title":"getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external)"},{"location":"DOCS/#getinterfaceaddresses-bytes32-address-address-address-external","text":"Function to get organization\u2019s interface details","title":"getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external)"},{"location":"DOCS/#registerorgbytes32-_name-address-_address-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata","text":"","title":"RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata)"},{"location":"DOCS/#updateorgbytes32-_name-address-_address-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata","text":"","title":"UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata)"},{"location":"DOCS/#iorgregistry","text":"","title":"IOrgRegistry"},{"location":"DOCS/#registerorgaddress-bytes32-bytes-bytes-bytes-bytes-bool-external","text":"","title":"registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external)"},{"location":"DOCS/#updateorgaddress-bytes32-bytes-bytes-bytes-bytes-bool-external","text":"","title":"updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external)"},{"location":"DOCS/#getorgcount-uint256-external_1","text":"","title":"getOrgCount() \u2192 uint256 (external)"},{"location":"DOCS/#getorgaddress-address-bytes32-bytes-bytes-bytes-bytes-external","text":"","title":"getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external)"},{"location":"DOCS/#erc165compatible","text":"","title":"ERC165Compatible"},{"location":"DOCS/#setinterfaces-bool-public_1","text":"","title":"setInterfaces() \u2192 bool (public)"},{"location":"DOCS/#erc1820registry","text":"This contract is the official implementation of the ERC1820 Registry. For more details, see https://eips.ethereum.org/EIPS/eip-1820","title":"ERC1820Registry"},{"location":"DOCS/#getinterfaceimplementeraddress-_addr-bytes32-_interfacehash-address-external","text":"Query if an address implements an interface and through which contract.","title":"getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external)"},{"location":"DOCS/#setinterfaceimplementeraddress-_addr-bytes32-_interfacehash-address-_implementer-external","text":"Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.)","title":"setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external)"},{"location":"DOCS/#setmanageraddress-_addr-address-_newmanager-external","text":"Sets \u2018_newManager\u2019 as manager for \u2018_addr\u2019. The new manager will be able to call \u2018setInterfaceImplementer\u2019 for \u2018_addr\u2019.","title":"setManager(address _addr, address _newManager) (external)"},{"location":"DOCS/#getmanageraddress-_addr-address-public","text":"Get the manager of an address.","title":"getManager(address _addr) \u2192 address (public)"},{"location":"DOCS/#interfacehashstring-_interfacename-bytes32-external","text":"Compute the keccak256 hash of an interface given its name.","title":"interfaceHash(string _interfaceName) \u2192 bytes32 (external)"},{"location":"DOCS/#updateerc165cacheaddress-_contract-bytes4-_interfaceid-external","text":"Updates the cache with whether the contract implements an ERC165 interface or not.","title":"updateERC165Cache(address _contract, bytes4 _interfaceId) (external)"},{"location":"DOCS/#implementserc165interfaceaddress-_contract-bytes4-_interfaceid-bool-public","text":"","title":"implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public)"},{"location":"DOCS/#implementserc165interfacenocacheaddress-_contract-bytes4-_interfaceid-bool-public","text":"Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.","title":"implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public)"},{"location":"DOCS/#iserc165interfacebytes32-_interfacehash-bool-internal","text":"Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.","title":"isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal)"},{"location":"DOCS/#nothrowcalladdress-_contract-bytes4-_interfaceid-uint256-success-uint256-result-internal","text":"Make a call on a contract without throwing if the function does not exist.","title":"noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal)"},{"location":"DOCS/#interfaceimplementersetaddress-addr-bytes32-interfacehash-address-implementer","text":"Indicates a contract is the \u2018implementer\u2019 of \u2018interfaceHash\u2019 for \u2018addr\u2019.","title":"InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer)"},{"location":"DOCS/#managerchangedaddress-addr-address-newmanager","text":"Indicates \u2018newManager\u2019 is the address of the new manager for \u2018addr\u2019.","title":"ManagerChanged(address addr, address newManager)"},{"location":"DOCS/#suryas-description-report","text":"","title":"S\u016brya's Description Report"},{"location":"DOCS/#files-description-table","text":"File Name SHA-1 Hash contracts/registry/IOrgRegistry.sol 0514e15aa16c4c92f61c3cdc3f17d93e3ee56377 contracts/registry/OrgRegistry.sol e0bb2ddd83c0d3373d6b58d50ec756a833ac88d0 contracts/registry/Registrar.sol 6507a72d2283a5e2cc04bc99ea90ef1f878fe9b7","title":"Files Description Table"},{"location":"DOCS/#contracts-description-table","text":"Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IOrgRegistry Interface \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f OrgRegistry Implementation Ownable, ERC165Compatible, Registrar, IOrgRegistry \u2514 Public \u2757\ufe0f \ud83d\uded1 ERC165Compatible Registrar \u2514 setInterfaces Public \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getInterfaces External \u2757\ufe0f NO\u2757\ufe0f \u2514 canImplementInterfaceForAddress External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManager External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 registerInterfaces External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f \u2514 getInterfaceAddresses External \u2757\ufe0f NO\u2757\ufe0f Registrar Implementation \u2514 Public \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 setInterfaceImplementation Internal \ud83d\udd12 \ud83d\uded1 \u2514 interfaceAddr External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManagement Internal \ud83d\udd12 \ud83d\uded1 \u2514 getManager Public \u2757\ufe0f NO\u2757\ufe0f","title":"Contracts Description Table"},{"location":"DOCS/#legend","text":"Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable","title":"Legend"},{"location":"DOCS/#suryas-description-report_1","text":"","title":"S\u016brya's Description Report"},{"location":"DOCS/#files-description-table_1","text":"File Name SHA-1 Hash contracts/privacy/IShield.sol c4b6e694bbdd4317e6fdc1e595e467cb10e5e1dd contracts/privacy/IVerifier.sol ba4926ea2f01fde5d11362808fc1e573e69e31e3 contracts/privacy/Shield.sol 14415a0a47a10c0865993bdc3c8a350c683dc69f","title":"Files Description Table"},{"location":"DOCS/#contracts-description-table_1","text":"Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IShield Interface \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f IVerifier Interface \u2514 verify External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f Shield Implementation IShield, MerkleTreeSHA256 \u2514 Public \u2757\ufe0f \ud83d\uded1 MerkleTreeSHA256 \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f","title":"Contracts Description Table"},{"location":"DOCS/#legend_1","text":"Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable","title":"Legend"},{"location":"FUNCTION/","text":"S\u016brya\u2019s Description Report \uf0c1 Files Description Table \uf0c1 File Name SHA-1 Hash contracts/registry/IOrgRegistry.sol 0514e15aa16c4c92f61c3cdc3f17d93e3ee56377 contracts/registry/OrgRegistry.sol e0bb2ddd83c0d3373d6b58d50ec756a833ac88d0 contracts/registry/Registrar.sol 6507a72d2283a5e2cc04bc99ea90ef1f878fe9b7 Contracts Description Table \uf0c1 Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IOrgRegistry Interface \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f OrgRegistry Implementation Ownable, ERC165Compatible, Registrar, IOrgRegistry \u2514 Public \u2757\ufe0f \ud83d\uded1 ERC165Compatible Registrar \u2514 setInterfaces Public \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getInterfaces External \u2757\ufe0f NO\u2757\ufe0f \u2514 canImplementInterfaceForAddress External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManager External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 registerInterfaces External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f \u2514 getInterfaceAddresses External \u2757\ufe0f NO\u2757\ufe0f Registrar Implementation \u2514 Public \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 setInterfaceImplementation Internal \ud83d\udd12 \ud83d\uded1 \u2514 interfaceAddr External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManagement Internal \ud83d\udd12 \ud83d\uded1 \u2514 getManager Public \u2757\ufe0f NO\u2757\ufe0f Legend \uf0c1 Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable S\u016brya\u2019s Description Report \uf0c1 Files Description Table \uf0c1 File Name SHA-1 Hash contracts/privacy/IShield.sol c4b6e694bbdd4317e6fdc1e595e467cb10e5e1dd contracts/privacy/IVerifier.sol ba4926ea2f01fde5d11362808fc1e573e69e31e3 contracts/privacy/Shield.sol 14415a0a47a10c0865993bdc3c8a350c683dc69f Contracts Description Table \uf0c1 Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IShield Interface \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f IVerifier Interface \u2514 verify External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f Shield Implementation IShield, MerkleTreeSHA256 \u2514 Public \u2757\ufe0f \ud83d\uded1 MerkleTreeSHA256 \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f Legend \uf0c1 Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable","title":"FUNCTION"},{"location":"FUNCTION/#suryas-description-report","text":"","title":"S\u016brya's Description Report"},{"location":"FUNCTION/#files-description-table","text":"File Name SHA-1 Hash contracts/registry/IOrgRegistry.sol 0514e15aa16c4c92f61c3cdc3f17d93e3ee56377 contracts/registry/OrgRegistry.sol e0bb2ddd83c0d3373d6b58d50ec756a833ac88d0 contracts/registry/Registrar.sol 6507a72d2283a5e2cc04bc99ea90ef1f878fe9b7","title":"Files Description Table"},{"location":"FUNCTION/#contracts-description-table","text":"Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IOrgRegistry Interface \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f OrgRegistry Implementation Ownable, ERC165Compatible, Registrar, IOrgRegistry \u2514 Public \u2757\ufe0f \ud83d\uded1 ERC165Compatible Registrar \u2514 setInterfaces Public \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getInterfaces External \u2757\ufe0f NO\u2757\ufe0f \u2514 canImplementInterfaceForAddress External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManager External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 registerOrg External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 updateOrg External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 registerInterfaces External \u2757\ufe0f \ud83d\uded1 onlyOwner \u2514 getOrgCount External \u2757\ufe0f NO\u2757\ufe0f \u2514 getOrg External \u2757\ufe0f NO\u2757\ufe0f \u2514 getInterfaceAddresses External \u2757\ufe0f NO\u2757\ufe0f Registrar Implementation \u2514 Public \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f \u2514 setInterfaceImplementation Internal \ud83d\udd12 \ud83d\uded1 \u2514 interfaceAddr External \u2757\ufe0f NO\u2757\ufe0f \u2514 assignManagement Internal \ud83d\udd12 \ud83d\uded1 \u2514 getManager Public \u2757\ufe0f NO\u2757\ufe0f","title":"Contracts Description Table"},{"location":"FUNCTION/#legend","text":"Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable","title":"Legend"},{"location":"FUNCTION/#suryas-description-report_1","text":"","title":"S\u016brya's Description Report"},{"location":"FUNCTION/#files-description-table_1","text":"File Name SHA-1 Hash contracts/privacy/IShield.sol c4b6e694bbdd4317e6fdc1e595e467cb10e5e1dd contracts/privacy/IVerifier.sol ba4926ea2f01fde5d11362808fc1e573e69e31e3 contracts/privacy/Shield.sol 14415a0a47a10c0865993bdc3c8a350c683dc69f","title":"Files Description Table"},{"location":"FUNCTION/#contracts-description-table_1","text":"Contract Type Bases \u2514 Function Name Visibility Mutability Modifiers IShield Interface \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f IVerifier Interface \u2514 verify External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f Shield Implementation IShield, MerkleTreeSHA256 \u2514 Public \u2757\ufe0f \ud83d\uded1 MerkleTreeSHA256 \u2514 getVerifier External \u2757\ufe0f NO\u2757\ufe0f \u2514 verifyAndPush External \u2757\ufe0f \ud83d\uded1 NO\u2757\ufe0f","title":"Contracts Description Table"},{"location":"FUNCTION/#legend_1","text":"Symbol Meaning \ud83d\uded1 Function can modify state \ud83d\udcb5 Function is payable","title":"Legend"},{"location":"PRIVACY/","text":"Privacy Contracts \uf0c1 IShield \uf0c1 getVerifier() \u2192 address (external) verifyAndPush(uint256[] proof, uint256[] publicInputs, bytes32 commitment) \u2192 bool (external) IVerifier \uf0c1 Example Verifier Implementation verify(uint256[] proof, uint256[] publicInputs) \u2192 bool result (external) Shield \uf0c1 constructor(address _verifier, uint256 _treeHeight) (public) getVerifier() \u2192 address (external) verifyAndPush(uint256[] _proof, uint256[] _publicInputs, bytes32 _newCommitment) \u2192 bool (external) MerkleTreeSHA256 \uf0c1 constructor(uint256 _treeHeight) (internal) insertLeaf(bytes32 leafValue) \u2192 bytes32 (internal) Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier. insertLeaves(bytes32[] leafValues) \u2192 bytes32 (internal) Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier. NewLeaf(uint256 leafIndex, bytes32 leafValue, bytes32 root) Explanation of the Merkle Tree in this contract: This is an append-only merkle tree; populated from left to right. We do not store all of the merkle tree\u2019s nodes. We only store the right-most \u2018frontier\u2019 of nodes required to calculate the new root when the next new leaf value is added. TREE (not stored) FRONTIER (stored) 0 ? / \\ 1 2 ? / / \\ 3 4 5 6 ? / / / / \\ 7 8 9 10 11 12 13 14 ? / / / / / / / / \\ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ? level row width start# end# 4 0 2^0=1 w=0 2^1-1=0 3 1 2^1=2 w=1 2^2-1=2 2 2 2^2=4 w=3 2^3-1=6 1 3 2^3=8 w=7 2^4-1=14 0 4 2^4=16 w=15 2^5-1=30 height = 4 w = width = 2 ** height = 2^4 = 16 nodes = (2 ** (height + 1)) - 1 = 2^5-1 = 31 \uf0c1 NewLeaves(uint256 minLeafIndex, bytes32[] leafValues, bytes32 root) Output(bytes27 leftInput, bytes27 rightInput, bytes32 output, uint256 nodeIndex) VerifierNoop \uf0c1 verify(uint256[] _proof, uint256[] _publicInputs) \u2192 bool result (external)","title":"Options"},{"location":"PRIVACY/#privacy-contracts","text":"","title":"Privacy Contracts"},{"location":"PRIVACY/#ishield","text":"","title":"IShield"},{"location":"PRIVACY/#iverifier","text":"Example Verifier Implementation","title":"IVerifier"},{"location":"PRIVACY/#shield","text":"","title":"Shield"},{"location":"PRIVACY/#merkletreesha256","text":"","title":"MerkleTreeSHA256"},{"location":"PRIVACY/#nodes-2-height-1-1-25-1-31","text":"","title":"nodes = (2 ** (height + 1)) - 1 = 2^5-1 = 31"},{"location":"PRIVACY/#verifiernoop","text":"","title":"VerifierNoop"},{"location":"REGISTRY/","text":"Registrar \uf0c1 Contract that acts as a client for interacting with the ERC1820Registry onlyManager() \uf0c1 Throws if called by any account other than the owner. constructor(address ERC1820RegistryAddress) (public) \uf0c1 Constructor that takes an argument of the ERC1820RegistryAddress Upon actual deployment of a static registry contract, this argument can be removed setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal) \uf0c1 Since this is an internal method any contract inheriting this contract would be leveraged as the sender for the interface registry This enables setting the interface implementation interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external) \uf0c1 This enables getting the address of the implementer assignManagement(address _newManager) (internal) \uf0c1 Since this is an internal method any contract inheriting this contract would be leveraged to call this function directly This enables assigning or changing manager getManager() \u2192 address (public) \uf0c1 This allows you to get this contract manager address OrgRegistry \uf0c1 Contract for maintaining organization registry Contract inherits from Ownable and ERC165Compatible Ownable contains ownership criteria of the organization registry ERC165Compatible contains interface compatibility checks constructor(address _erc1820) (public) \uf0c1 constructor function that takes the address of a pre-deployed ERC1820 registry. Ideally, this contract is a publicly known address: 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor sets the interfaces and registers the current contract with the global registry setInterfaces() \u2192 bool (public) \uf0c1 This is an implementation of setting interfaces for the organization registry contract the character \u2018^\u2019 corresponds to bit wise xor of individual interface id\u2019s which are the parsed 4 bytes of the function signature of each of the functions in the org registry contract getInterfaces() \u2192 bytes4 (external) \uf0c1 This function is a helper function to be able to get the set interface id by the setInterfaces() canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external) \uf0c1 Indicates whether the contract implements the interface \u2018interfaceHash\u2019 for the address \u2018addr\u2019 or not. Below implementation is necessary to be able to have the ability to register with ERC1820 assignManager(address _newManager) (external) \uf0c1 Since this is an inherited method from Registrar, it allows for a new manager to be set for this contract instance registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) \uf0c1 Function to register an organization Function to register an organization updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) \uf0c1 Function to update an organization Function to update an organization registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external) \uf0c1 Function to register the names of the interfaces associated with the OrgRegistry Function to register an organization\u2019s interfaces for easy lookup getOrgCount() \u2192 uint256 (external) \uf0c1 Function to get the count of number of organizations to help with extraction getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) \uf0c1 Function to get a single organization\u2019s details getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external) \uf0c1 Function to get organization\u2019s interface details RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \uf0c1 UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \uf0c1 IOrgRegistry \uf0c1 registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) \uf0c1 updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) \uf0c1 getOrgCount() \u2192 uint256 (external) \uf0c1 getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) \uf0c1 ERC165Compatible \uf0c1 setInterfaces() \u2192 bool (public) \uf0c1 ERC1820Registry \uf0c1 This contract is the official implementation of the ERC1820 Registry. For more details, see https://eips.ethereum.org/EIPS/eip-1820 getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external) \uf0c1 Query if an address implements an interface and through which contract. setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external) \uf0c1 Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.) setManager(address _addr, address _newManager) (external) \uf0c1 Sets \u2018_newManager\u2019 as manager for \u2018_addr\u2019. The new manager will be able to call \u2018setInterfaceImplementer\u2019 for \u2018_addr\u2019. getManager(address _addr) \u2192 address (public) \uf0c1 Get the manager of an address. interfaceHash(string _interfaceName) \u2192 bytes32 (external) \uf0c1 Compute the keccak256 hash of an interface given its name. updateERC165Cache(address _contract, bytes4 _interfaceId) (external) \uf0c1 Updates the cache with whether the contract implements an ERC165 interface or not. implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public) \uf0c1 implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public) \uf0c1 Checks whether a contract implements an ERC165 interface or not without using nor updating the cache. isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal) \uf0c1 Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not. noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal) \uf0c1 Make a call on a contract without throwing if the function does not exist. InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer) \uf0c1 Indicates a contract is the \u2018implementer\u2019 of \u2018interfaceHash\u2019 for \u2018addr\u2019. ManagerChanged(address addr, address newManager) \uf0c1 Indicates \u2018newManager\u2019 is the address of the new manager for \u2018addr\u2019.","title":"REGISTRY"},{"location":"REGISTRY/#registrar","text":"Contract that acts as a client for interacting with the ERC1820Registry","title":"Registrar"},{"location":"REGISTRY/#onlymanager","text":"Throws if called by any account other than the owner.","title":"onlyManager()"},{"location":"REGISTRY/#constructoraddress-erc1820registryaddress-public","text":"Constructor that takes an argument of the ERC1820RegistryAddress Upon actual deployment of a static registry contract, this argument can be removed","title":"constructor(address ERC1820RegistryAddress) (public)"},{"location":"REGISTRY/#setinterfaceimplementationstring-_interfacelabel-address-_implementation-internal","text":"Since this is an internal method any contract inheriting this contract would be leveraged as the sender for the interface registry This enables setting the interface implementation","title":"setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal)"},{"location":"REGISTRY/#interfaceaddraddress-addr-string-_interfacelabel-address-external","text":"This enables getting the address of the implementer","title":"interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external)"},{"location":"REGISTRY/#assignmanagementaddress-_newmanager-internal","text":"Since this is an internal method any contract inheriting this contract would be leveraged to call this function directly This enables assigning or changing manager","title":"assignManagement(address _newManager) (internal)"},{"location":"REGISTRY/#getmanager-address-public","text":"This allows you to get this contract manager address","title":"getManager() \u2192 address (public)"},{"location":"REGISTRY/#orgregistry","text":"Contract for maintaining organization registry Contract inherits from Ownable and ERC165Compatible Ownable contains ownership criteria of the organization registry ERC165Compatible contains interface compatibility checks","title":"OrgRegistry"},{"location":"REGISTRY/#constructoraddress-_erc1820-public","text":"constructor function that takes the address of a pre-deployed ERC1820 registry. Ideally, this contract is a publicly known address: 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor sets the interfaces and registers the current contract with the global registry","title":"constructor(address _erc1820) (public)"},{"location":"REGISTRY/#setinterfaces-bool-public","text":"This is an implementation of setting interfaces for the organization registry contract the character \u2018^\u2019 corresponds to bit wise xor of individual interface id\u2019s which are the parsed 4 bytes of the function signature of each of the functions in the org registry contract","title":"setInterfaces() \u2192 bool (public)"},{"location":"REGISTRY/#getinterfaces-bytes4-external","text":"This function is a helper function to be able to get the set interface id by the setInterfaces()","title":"getInterfaces() \u2192 bytes4 (external)"},{"location":"REGISTRY/#canimplementinterfaceforaddressbytes32-interfacehash-address-addr-bytes32-external","text":"Indicates whether the contract implements the interface \u2018interfaceHash\u2019 for the address \u2018addr\u2019 or not. Below implementation is necessary to be able to have the ability to register with ERC1820","title":"canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external)"},{"location":"REGISTRY/#assignmanageraddress-_newmanager-external","text":"Since this is an inherited method from Registrar, it allows for a new manager to be set for this contract instance","title":"assignManager(address _newManager) (external)"},{"location":"REGISTRY/#registerorgaddress-_address-bytes32-_name-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata-bool-external","text":"Function to register an organization Function to register an organization","title":"registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external)"},{"location":"REGISTRY/#updateorgaddress-_address-bytes32-_name-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata-bool-external","text":"Function to update an organization Function to update an organization","title":"updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external)"},{"location":"REGISTRY/#registerinterfacesbytes32-_groupname-address-_tokenaddress-address-_shieldaddress-address-_verifieraddress-bool-external","text":"Function to register the names of the interfaces associated with the OrgRegistry Function to register an organization\u2019s interfaces for easy lookup","title":"registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external)"},{"location":"REGISTRY/#getorgcount-uint256-external","text":"Function to get the count of number of organizations to help with extraction","title":"getOrgCount() \u2192 uint256 (external)"},{"location":"REGISTRY/#getorgaddress-_address-address-bytes32-bytes-bytes-bytes-bytes-external","text":"Function to get a single organization\u2019s details","title":"getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external)"},{"location":"REGISTRY/#getinterfaceaddresses-bytes32-address-address-address-external","text":"Function to get organization\u2019s interface details","title":"getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external)"},{"location":"REGISTRY/#registerorgbytes32-_name-address-_address-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata","text":"","title":"RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata)"},{"location":"REGISTRY/#updateorgbytes32-_name-address-_address-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata","text":"","title":"UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata)"},{"location":"REGISTRY/#iorgregistry","text":"","title":"IOrgRegistry"},{"location":"REGISTRY/#registerorgaddress-bytes32-bytes-bytes-bytes-bytes-bool-external","text":"","title":"registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external)"},{"location":"REGISTRY/#updateorgaddress-bytes32-bytes-bytes-bytes-bytes-bool-external","text":"","title":"updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external)"},{"location":"REGISTRY/#getorgcount-uint256-external_1","text":"","title":"getOrgCount() \u2192 uint256 (external)"},{"location":"REGISTRY/#getorgaddress-address-bytes32-bytes-bytes-bytes-bytes-external","text":"","title":"getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external)"},{"location":"REGISTRY/#erc165compatible","text":"","title":"ERC165Compatible"},{"location":"REGISTRY/#setinterfaces-bool-public_1","text":"","title":"setInterfaces() \u2192 bool (public)"},{"location":"REGISTRY/#erc1820registry","text":"This contract is the official implementation of the ERC1820 Registry. For more details, see https://eips.ethereum.org/EIPS/eip-1820","title":"ERC1820Registry"},{"location":"REGISTRY/#getinterfaceimplementeraddress-_addr-bytes32-_interfacehash-address-external","text":"Query if an address implements an interface and through which contract.","title":"getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external)"},{"location":"REGISTRY/#setinterfaceimplementeraddress-_addr-bytes32-_interfacehash-address-_implementer-external","text":"Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.)","title":"setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external)"},{"location":"REGISTRY/#setmanageraddress-_addr-address-_newmanager-external","text":"Sets \u2018_newManager\u2019 as manager for \u2018_addr\u2019. The new manager will be able to call \u2018setInterfaceImplementer\u2019 for \u2018_addr\u2019.","title":"setManager(address _addr, address _newManager) (external)"},{"location":"REGISTRY/#getmanageraddress-_addr-address-public","text":"Get the manager of an address.","title":"getManager(address _addr) \u2192 address (public)"},{"location":"REGISTRY/#interfacehashstring-_interfacename-bytes32-external","text":"Compute the keccak256 hash of an interface given its name.","title":"interfaceHash(string _interfaceName) \u2192 bytes32 (external)"},{"location":"REGISTRY/#updateerc165cacheaddress-_contract-bytes4-_interfaceid-external","text":"Updates the cache with whether the contract implements an ERC165 interface or not.","title":"updateERC165Cache(address _contract, bytes4 _interfaceId) (external)"},{"location":"REGISTRY/#implementserc165interfaceaddress-_contract-bytes4-_interfaceid-bool-public","text":"","title":"implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public)"},{"location":"REGISTRY/#implementserc165interfacenocacheaddress-_contract-bytes4-_interfaceid-bool-public","text":"Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.","title":"implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public)"},{"location":"REGISTRY/#iserc165interfacebytes32-_interfacehash-bool-internal","text":"Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.","title":"isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal)"},{"location":"REGISTRY/#nothrowcalladdress-_contract-bytes4-_interfaceid-uint256-success-uint256-result-internal","text":"Make a call on a contract without throwing if the function does not exist.","title":"noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal)"},{"location":"REGISTRY/#interfaceimplementersetaddress-addr-bytes32-interfacehash-address-implementer","text":"Indicates a contract is the \u2018implementer\u2019 of \u2018interfaceHash\u2019 for \u2018addr\u2019.","title":"InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer)"},{"location":"REGISTRY/#managerchangedaddress-addr-address-newmanager","text":"Indicates \u2018newManager\u2019 is the address of the new manager for \u2018addr\u2019.","title":"ManagerChanged(address addr, address newManager)"},{"location":"_privacy/","text":"Privacy Contracts IShield getVerifier() \u2192 address (external) verifyAndPush(uint256[] proof, uint256[] publicInputs, bytes32 commitment) \u2192 bool (external) IVerifier verify(uint256[] proof, uint256[] publicInputs) \u2192 bool result (external) Shield constructor(address _verifier, uint256 _treeHeight) (public) getVerifier() \u2192 address (external) verifyAndPush(uint256[] _proof, uint256[] _publicInputs, bytes32 _newCommitment) \u2192 bool (external) MerkleTreeSHA256 constructor(uint256 _treeHeight) (internal) insertLeaf(bytes32 leafValue) \u2192 bytes32 (internal) insertLeaves(bytes32[] leafValues) \u2192 bytes32 (internal) NewLeaf(uint256 leafIndex, bytes32 leafValue, bytes32 root) NewLeaves(uint256 minLeafIndex, bytes32[] leafValues, bytes32 root) Output(bytes27 leftInput, bytes27 rightInput, bytes32 output, uint256 nodeIndex) VerifierNoop verify(uint256[] _proof, uint256[] _publicInputs) \u2192 bool result (external)","title":" privacy"},{"location":"_registry/","text":"Registry Contracts Registrar onlyManager() constructor(address ERC1820RegistryAddress) (public) setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal) interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external) assignManagement(address _newManager) (internal) getManager() \u2192 address (public) OrgRegistry constructor(address _erc1820) (public) setInterfaces() \u2192 bool (public) getInterfaces() \u2192 bytes4 (external) canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external) assignManager(address _newManager) (external) registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external) getOrgCount() \u2192 uint256 (external) getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external) RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) IOrgRegistry registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) getOrgCount() \u2192 uint256 (external) getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) ERC165Compatible setInterfaces() \u2192 bool (public) ERC1820Registry getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external) setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external) setManager(address _addr, address _newManager) (external) getManager(address _addr) \u2192 address (public) interfaceHash(string _interfaceName) \u2192 bytes32 (external) updateERC165Cache(address _contract, bytes4 _interfaceId) (external) implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public) implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public) isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal) noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal) InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer) ManagerChanged(address addr, address newManager)","title":" registry"},{"location":"privacy/IShield/","text":"IShield \uf0c1 getVerifier() \u2192 address (external) \uf0c1 verifyAndPush(uint256[] proof, uint256[] publicInputs, bytes32 commitment) \u2192 bool (external) \uf0c1","title":"IShield"},{"location":"privacy/IShield/#ishield","text":"","title":"IShield"},{"location":"privacy/IShield/#getverifier-address-external","text":"","title":"getVerifier() \u2192 address (external)"},{"location":"privacy/IShield/#verifyandpushuint256-proof-uint256-publicinputs-bytes32-commitment-bool-external","text":"","title":"verifyAndPush(uint256[] proof, uint256[] publicInputs, bytes32 commitment) \u2192 bool (external)"},{"location":"privacy/IVerifier/","text":"IVerifier \uf0c1 Example Verifier Implementation verify(uint256[] proof, uint256[] publicInputs) \u2192 bool result (external) \uf0c1","title":"IVerifier"},{"location":"privacy/IVerifier/#iverifier","text":"Example Verifier Implementation","title":"IVerifier"},{"location":"privacy/IVerifier/#verifyuint256-proof-uint256-publicinputs-bool-result-external","text":"","title":"verify(uint256[] proof, uint256[] publicInputs) \u2192 bool result (external)"},{"location":"privacy/Shield/","text":"Shield \uf0c1 constructor(address _verifier, uint256 _treeHeight) (public) \uf0c1 getVerifier() \u2192 address (external) \uf0c1 verifyAndPush(uint256[] _proof, uint256[] _publicInputs, bytes32 _newCommitment) \u2192 bool (external) \uf0c1","title":"Shield"},{"location":"privacy/Shield/#shield","text":"","title":"Shield"},{"location":"privacy/Shield/#constructoraddress-_verifier-uint256-_treeheight-public","text":"","title":"constructor(address _verifier, uint256 _treeHeight) (public)"},{"location":"privacy/Shield/#getverifier-address-external","text":"","title":"getVerifier() \u2192 address (external)"},{"location":"privacy/Shield/#verifyandpushuint256-_proof-uint256-_publicinputs-bytes32-_newcommitment-bool-external","text":"","title":"verifyAndPush(uint256[] _proof, uint256[] _publicInputs, bytes32 _newCommitment) \u2192 bool (external)"},{"location":"privacy/lib/MerkleTreeSHA256/","text":"MerkleTreeSHA256 \uf0c1 constructor(uint256 _treeHeight) (internal) \uf0c1 insertLeaf(bytes32 leafValue) \u2192 bytes32 (internal) \uf0c1 Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier. insertLeaves(bytes32[] leafValues) \u2192 bytes32 (internal) \uf0c1 Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier. NewLeaf(uint256 leafIndex, bytes32 leafValue, bytes32 root) \uf0c1 Explanation of the Merkle Tree in this contract: This is an append-only merkle tree; populated from left to right. We do not store all of the merkle tree\u2019s nodes. We only store the right-most \u2018frontier\u2019 of nodes required to calculate the new root when the next new leaf value is added. TREE (not stored) FRONTIER (stored) 0 ? / \\ 1 2 ? / / \\ 3 4 5 6 ? / / / / \\ 7 8 9 10 11 12 13 14 ? / / / / / / / / \\ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ? level row width start# end# 4 0 2^0=1 w=0 2^1-1=0 3 1 2^1=2 w=1 2^2-1=2 2 2 2^2=4 w=3 2^3-1=6 1 3 2^3=8 w=7 2^4-1=14 0 4 2^4=16 w=15 2^5-1=30 height = 4 w = width = 2 ** height = 2^4 = 16 nodes = (2 ** (height + 1)) - 1 = 2^5-1 = 31 \uf0c1 NewLeaves(uint256 minLeafIndex, bytes32[] leafValues, bytes32 root) \uf0c1 Output(bytes27 leftInput, bytes27 rightInput, bytes32 output, uint256 nodeIndex) \uf0c1","title":"MerkleTreeSHA256"},{"location":"privacy/lib/MerkleTreeSHA256/#merkletreesha256","text":"","title":"MerkleTreeSHA256"},{"location":"privacy/lib/MerkleTreeSHA256/#constructoruint256-_treeheight-internal","text":"","title":"constructor(uint256 _treeHeight) (internal)"},{"location":"privacy/lib/MerkleTreeSHA256/#insertleafbytes32-leafvalue-bytes32-internal","text":"Insert a leaf into the Merkle Tree, update the root, and update any values in the (persistently stored) frontier.","title":"insertLeaf(bytes32 leafValue) \u2192 bytes32 (internal)"},{"location":"privacy/lib/MerkleTreeSHA256/#insertleavesbytes32-leafvalues-bytes32-internal","text":"Insert multiple leaves into the Merkle Tree, and then update the root, and update any values in the (persistently stored) frontier.","title":"insertLeaves(bytes32[] leafValues) \u2192 bytes32 (internal)"},{"location":"privacy/lib/MerkleTreeSHA256/#newleafuint256-leafindex-bytes32-leafvalue-bytes32-root","text":"Explanation of the Merkle Tree in this contract: This is an append-only merkle tree; populated from left to right. We do not store all of the merkle tree\u2019s nodes. We only store the right-most \u2018frontier\u2019 of nodes required to calculate the new root when the next new leaf value is added. TREE (not stored) FRONTIER (stored) 0 ? / \\ 1 2 ? / / \\ 3 4 5 6 ? / / / / \\ 7 8 9 10 11 12 13 14 ? / / / / / / / / \\ 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ? level row width start# end# 4 0 2^0=1 w=0 2^1-1=0 3 1 2^1=2 w=1 2^2-1=2 2 2 2^2=4 w=3 2^3-1=6 1 3 2^3=8 w=7 2^4-1=14 0 4 2^4=16 w=15 2^5-1=30 height = 4 w = width = 2 ** height = 2^4 = 16","title":"NewLeaf(uint256 leafIndex, bytes32 leafValue, bytes32 root)"},{"location":"privacy/lib/MerkleTreeSHA256/#nodes-2-height-1-1-25-1-31","text":"","title":"nodes = (2 ** (height + 1)) - 1 = 2^5-1 = 31"},{"location":"privacy/lib/MerkleTreeSHA256/#newleavesuint256-minleafindex-bytes32-leafvalues-bytes32-root","text":"","title":"NewLeaves(uint256 minLeafIndex, bytes32[] leafValues, bytes32 root)"},{"location":"privacy/lib/MerkleTreeSHA256/#outputbytes27-leftinput-bytes27-rightinput-bytes32-output-uint256-nodeindex","text":"","title":"Output(bytes27 leftInput, bytes27 rightInput, bytes32 output, uint256 nodeIndex)"},{"location":"privacy/lib/VerifierNoop/","text":"VerifierNoop \uf0c1 verify(uint256[] _proof, uint256[] _publicInputs) \u2192 bool result (external) \uf0c1","title":"VerifierNoop"},{"location":"privacy/lib/VerifierNoop/#verifiernoop","text":"","title":"VerifierNoop"},{"location":"privacy/lib/VerifierNoop/#verifyuint256-_proof-uint256-_publicinputs-bool-result-external","text":"","title":"verify(uint256[] _proof, uint256[] _publicInputs) \u2192 bool result (external)"},{"location":"registry/IOrgRegistry/","text":"IOrgRegistry \uf0c1 registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) \uf0c1 updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external) \uf0c1 getOrgCount() \u2192 uint256 (external) \uf0c1 getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) \uf0c1","title":"IOrgRegistry"},{"location":"registry/IOrgRegistry/#iorgregistry","text":"","title":"IOrgRegistry"},{"location":"registry/IOrgRegistry/#registerorgaddress-bytes32-bytes-bytes-bytes-bytes-bool-external","text":"","title":"registerOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external)"},{"location":"registry/IOrgRegistry/#updateorgaddress-bytes32-bytes-bytes-bytes-bytes-bool-external","text":"","title":"updateOrg(address, bytes32, bytes, bytes, bytes, bytes) \u2192 bool (external)"},{"location":"registry/IOrgRegistry/#getorgcount-uint256-external","text":"","title":"getOrgCount() \u2192 uint256 (external)"},{"location":"registry/IOrgRegistry/#getorgaddress-address-bytes32-bytes-bytes-bytes-bytes-external","text":"","title":"getOrg(address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external)"},{"location":"registry/OrgRegistry/","text":"OrgRegistry \uf0c1 Contract for maintaining organization registry Contract inherits from Ownable and ERC165Compatible Ownable contains ownership criteria of the organization registry ERC165Compatible contains interface compatibility checks constructor(address _erc1820) (public) \uf0c1 constructor function that takes the address of a pre-deployed ERC1820 registry. Ideally, this contract is a publicly known address: 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor sets the interfaces and registers the current contract with the global registry setInterfaces() \u2192 bool (public) \uf0c1 This is an implementation of setting interfaces for the organization registry contract the character \u2018^\u2019 corresponds to bit wise xor of individual interface id\u2019s which are the parsed 4 bytes of the function signature of each of the functions in the org registry contract getInterfaces() \u2192 bytes4 (external) \uf0c1 This function is a helper function to be able to get the set interface id by the setInterfaces() canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external) \uf0c1 Indicates whether the contract implements the interface \u2018interfaceHash\u2019 for the address \u2018addr\u2019 or not. Below implementation is necessary to be able to have the ability to register with ERC1820 assignManager(address _newManager) (external) \uf0c1 Since this is an inherited method from Registrar, it allows for a new manager to be set for this contract instance registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) \uf0c1 Function to register an organization Function to register an organization updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external) \uf0c1 Function to update an organization Function to update an organization registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external) \uf0c1 Function to register the names of the interfaces associated with the OrgRegistry Function to register an organization\u2019s interfaces for easy lookup getOrgCount() \u2192 uint256 (external) \uf0c1 Function to get the count of number of organizations to help with extraction getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external) \uf0c1 Function to get a single organization\u2019s details getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external) \uf0c1 Function to get organization\u2019s interface details RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \uf0c1 UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \uf0c1","title":"OrgRegistry"},{"location":"registry/OrgRegistry/#orgregistry","text":"Contract for maintaining organization registry Contract inherits from Ownable and ERC165Compatible Ownable contains ownership criteria of the organization registry ERC165Compatible contains interface compatibility checks","title":"OrgRegistry"},{"location":"registry/OrgRegistry/#constructoraddress-_erc1820-public","text":"constructor function that takes the address of a pre-deployed ERC1820 registry. Ideally, this contract is a publicly known address: 0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24. Inherently, the constructor sets the interfaces and registers the current contract with the global registry","title":"constructor(address _erc1820) (public)"},{"location":"registry/OrgRegistry/#setinterfaces-bool-public","text":"This is an implementation of setting interfaces for the organization registry contract the character \u2018^\u2019 corresponds to bit wise xor of individual interface id\u2019s which are the parsed 4 bytes of the function signature of each of the functions in the org registry contract","title":"setInterfaces() \u2192 bool (public)"},{"location":"registry/OrgRegistry/#getinterfaces-bytes4-external","text":"This function is a helper function to be able to get the set interface id by the setInterfaces()","title":"getInterfaces() \u2192 bytes4 (external)"},{"location":"registry/OrgRegistry/#canimplementinterfaceforaddressbytes32-interfacehash-address-addr-bytes32-external","text":"Indicates whether the contract implements the interface \u2018interfaceHash\u2019 for the address \u2018addr\u2019 or not. Below implementation is necessary to be able to have the ability to register with ERC1820","title":"canImplementInterfaceForAddress(bytes32 interfaceHash, address addr) \u2192 bytes32 (external)"},{"location":"registry/OrgRegistry/#assignmanageraddress-_newmanager-external","text":"Since this is an inherited method from Registrar, it allows for a new manager to be set for this contract instance","title":"assignManager(address _newManager) (external)"},{"location":"registry/OrgRegistry/#registerorgaddress-_address-bytes32-_name-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata-bool-external","text":"Function to register an organization Function to register an organization","title":"registerOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external)"},{"location":"registry/OrgRegistry/#updateorgaddress-_address-bytes32-_name-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata-bool-external","text":"Function to update an organization Function to update an organization","title":"updateOrg(address _address, bytes32 _name, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata) \u2192 bool (external)"},{"location":"registry/OrgRegistry/#registerinterfacesbytes32-_groupname-address-_tokenaddress-address-_shieldaddress-address-_verifieraddress-bool-external","text":"Function to register the names of the interfaces associated with the OrgRegistry Function to register an organization\u2019s interfaces for easy lookup","title":"registerInterfaces(bytes32 _groupName, address _tokenAddress, address _shieldAddress, address _verifierAddress) \u2192 bool (external)"},{"location":"registry/OrgRegistry/#getorgcount-uint256-external","text":"Function to get the count of number of organizations to help with extraction","title":"getOrgCount() \u2192 uint256 (external)"},{"location":"registry/OrgRegistry/#getorgaddress-_address-address-bytes32-bytes-bytes-bytes-bytes-external","text":"Function to get a single organization\u2019s details","title":"getOrg(address _address) \u2192 address, bytes32, bytes, bytes, bytes, bytes (external)"},{"location":"registry/OrgRegistry/#getinterfaceaddresses-bytes32-address-address-address-external","text":"Function to get organization\u2019s interface details","title":"getInterfaceAddresses() \u2192 bytes32[], address[], address[], address[] (external)"},{"location":"registry/OrgRegistry/#registerorgbytes32-_name-address-_address-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata","text":"","title":"RegisterOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata)"},{"location":"registry/OrgRegistry/#updateorgbytes32-_name-address-_address-bytes-_messagingendpoint-bytes-_whisperkey-bytes-_zkppublickey-bytes-_metadata","text":"","title":"UpdateOrg(bytes32 _name, address _address, bytes _messagingEndpoint, bytes _whisperKey, bytes _zkpPublicKey, bytes _metadata)"},{"location":"registry/Registrar/","text":"Registrar \uf0c1 Contract that acts as a client for interacting with the ERC1820Registry onlyManager() \uf0c1 Throws if called by any account other than the owner. constructor(address ERC1820RegistryAddress) (public) \uf0c1 Constructor that takes an argument of the ERC1820RegistryAddress Upon actual deployment of a static registry contract, this argument can be removed setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal) \uf0c1 Since this is an internal method any contract inheriting this contract would be leveraged as the sender for the interface registry This enables setting the interface implementation interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external) \uf0c1 This enables getting the address of the implementer assignManagement(address _newManager) (internal) \uf0c1 Since this is an internal method any contract inheriting this contract would be leveraged to call this function directly This enables assigning or changing manager getManager() \u2192 address (public) \uf0c1 This allows you to get this contract manager address","title":"Registrar"},{"location":"registry/Registrar/#registrar","text":"Contract that acts as a client for interacting with the ERC1820Registry","title":"Registrar"},{"location":"registry/Registrar/#onlymanager","text":"Throws if called by any account other than the owner.","title":"onlyManager()"},{"location":"registry/Registrar/#constructoraddress-erc1820registryaddress-public","text":"Constructor that takes an argument of the ERC1820RegistryAddress Upon actual deployment of a static registry contract, this argument can be removed","title":"constructor(address ERC1820RegistryAddress) (public)"},{"location":"registry/Registrar/#setinterfaceimplementationstring-_interfacelabel-address-_implementation-internal","text":"Since this is an internal method any contract inheriting this contract would be leveraged as the sender for the interface registry This enables setting the interface implementation","title":"setInterfaceImplementation(string _interfaceLabel, address _implementation) (internal)"},{"location":"registry/Registrar/#interfaceaddraddress-addr-string-_interfacelabel-address-external","text":"This enables getting the address of the implementer","title":"interfaceAddr(address addr, string _interfaceLabel) \u2192 address (external)"},{"location":"registry/Registrar/#assignmanagementaddress-_newmanager-internal","text":"Since this is an internal method any contract inheriting this contract would be leveraged to call this function directly This enables assigning or changing manager","title":"assignManagement(address _newManager) (internal)"},{"location":"registry/Registrar/#getmanager-address-public","text":"This allows you to get this contract manager address","title":"getManager() \u2192 address (public)"},{"location":"registry/lib/ERC165Compatible/","text":"ERC165Compatible \uf0c1 setInterfaces() \u2192 bool (public) \uf0c1","title":"ERC165Compatible"},{"location":"registry/lib/ERC165Compatible/#erc165compatible","text":"","title":"ERC165Compatible"},{"location":"registry/lib/ERC165Compatible/#setinterfaces-bool-public","text":"","title":"setInterfaces() \u2192 bool (public)"},{"location":"registry/lib/ERC1820Registry/","text":"ERC1820Registry \uf0c1 This contract is the official implementation of the ERC1820 Registry. For more details, see https://eips.ethereum.org/EIPS/eip-1820 getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external) \uf0c1 Query if an address implements an interface and through which contract. setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external) \uf0c1 Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.) setManager(address _addr, address _newManager) (external) \uf0c1 Sets \u2018_newManager\u2019 as manager for \u2018_addr\u2019. The new manager will be able to call \u2018setInterfaceImplementer\u2019 for \u2018_addr\u2019. getManager(address _addr) \u2192 address (public) \uf0c1 Get the manager of an address. interfaceHash(string _interfaceName) \u2192 bytes32 (external) \uf0c1 Compute the keccak256 hash of an interface given its name. updateERC165Cache(address _contract, bytes4 _interfaceId) (external) \uf0c1 Updates the cache with whether the contract implements an ERC165 interface or not. implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public) \uf0c1 implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public) \uf0c1 Checks whether a contract implements an ERC165 interface or not without using nor updating the cache. isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal) \uf0c1 Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not. noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal) \uf0c1 Make a call on a contract without throwing if the function does not exist. InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer) \uf0c1 Indicates a contract is the \u2018implementer\u2019 of \u2018interfaceHash\u2019 for \u2018addr\u2019. ManagerChanged(address addr, address newManager) \uf0c1 Indicates \u2018newManager\u2019 is the address of the new manager for \u2018addr\u2019.","title":"ERC1820Registry"},{"location":"registry/lib/ERC1820Registry/#erc1820registry","text":"This contract is the official implementation of the ERC1820 Registry. For more details, see https://eips.ethereum.org/EIPS/eip-1820","title":"ERC1820Registry"},{"location":"registry/lib/ERC1820Registry/#getinterfaceimplementeraddress-_addr-bytes32-_interfacehash-address-external","text":"Query if an address implements an interface and through which contract.","title":"getInterfaceImplementer(address _addr, bytes32 _interfaceHash) \u2192 address (external)"},{"location":"registry/lib/ERC1820Registry/#setinterfaceimplementeraddress-_addr-bytes32-_interfacehash-address-_implementer-external","text":"Sets the contract which implements a specific interface for an address. Only the manager defined for that address can set it. (Each address is the manager for itself until it sets a new manager.)","title":"setInterfaceImplementer(address _addr, bytes32 _interfaceHash, address _implementer) (external)"},{"location":"registry/lib/ERC1820Registry/#setmanageraddress-_addr-address-_newmanager-external","text":"Sets \u2018_newManager\u2019 as manager for \u2018_addr\u2019. The new manager will be able to call \u2018setInterfaceImplementer\u2019 for \u2018_addr\u2019.","title":"setManager(address _addr, address _newManager) (external)"},{"location":"registry/lib/ERC1820Registry/#getmanageraddress-_addr-address-public","text":"Get the manager of an address.","title":"getManager(address _addr) \u2192 address (public)"},{"location":"registry/lib/ERC1820Registry/#interfacehashstring-_interfacename-bytes32-external","text":"Compute the keccak256 hash of an interface given its name.","title":"interfaceHash(string _interfaceName) \u2192 bytes32 (external)"},{"location":"registry/lib/ERC1820Registry/#updateerc165cacheaddress-_contract-bytes4-_interfaceid-external","text":"Updates the cache with whether the contract implements an ERC165 interface or not.","title":"updateERC165Cache(address _contract, bytes4 _interfaceId) (external)"},{"location":"registry/lib/ERC1820Registry/#implementserc165interfaceaddress-_contract-bytes4-_interfaceid-bool-public","text":"","title":"implementsERC165Interface(address _contract, bytes4 _interfaceId) \u2192 bool (public)"},{"location":"registry/lib/ERC1820Registry/#implementserc165interfacenocacheaddress-_contract-bytes4-_interfaceid-bool-public","text":"Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.","title":"implementsERC165InterfaceNoCache(address _contract, bytes4 _interfaceId) \u2192 bool (public)"},{"location":"registry/lib/ERC1820Registry/#iserc165interfacebytes32-_interfacehash-bool-internal","text":"Checks whether the hash is a ERC165 interface (ending with 28 zeroes) or not.","title":"isERC165Interface(bytes32 _interfaceHash) \u2192 bool (internal)"},{"location":"registry/lib/ERC1820Registry/#nothrowcalladdress-_contract-bytes4-_interfaceid-uint256-success-uint256-result-internal","text":"Make a call on a contract without throwing if the function does not exist.","title":"noThrowCall(address _contract, bytes4 _interfaceId) \u2192 uint256 success, uint256 result (internal)"},{"location":"registry/lib/ERC1820Registry/#interfaceimplementersetaddress-addr-bytes32-interfacehash-address-implementer","text":"Indicates a contract is the \u2018implementer\u2019 of \u2018interfaceHash\u2019 for \u2018addr\u2019.","title":"InterfaceImplementerSet(address addr, bytes32 interfaceHash, address implementer)"},{"location":"registry/lib/ERC1820Registry/#managerchangedaddress-addr-address-newmanager","text":"Indicates \u2018newManager\u2019 is the address of the new manager for \u2018addr\u2019.","title":"ManagerChanged(address addr, address newManager)"}]}